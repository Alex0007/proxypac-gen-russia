// TODO PARSE URLs var blocked_urls

var dump_url = 'https://raw.githubusercontent.com/zapret-info/z-i/master/dump.csv';
var proxy_string = 'SOCKS 127.0.0.1:9050'; // tor proxy


var fs = require('fs');
var express = require('express');
var schedule = require('node-schedule');
var request = require('request');
var async = require('async');
var moment = require('moment');

var app = express();
app.use(express.static(__dirname + '/static'));

function find_IP(filename) { //parse ip adresses from file
    var fs = require('fs')
    fs.readFile(filename, 'utf8', function (err, data) {
        if (err) {
            return console.log(err);
        }
        var re = /(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]);/g;
        var ips = data.match(re);
        for (var key in ips) {
            ips[key] = ips[key].slice(0, -1);
        }
        var uniq_ips = ips.reduce(function (a, b) { //remove duplicates
            if (a.indexOf(b) < 0) a.push(b);
            return a;
        }, []);
        ips = uniq_ips;
        build_pac(__dirname + '/static/proxy.pac', ips); //generate pac-file

    });
}

function build_pac(filename, ips) { // .pac-file builder
    console.log('generating new proxy pac');

    console.log(ips.length);
    var file = fs.createWriteStream(filename);
    file.write('// proxypac_gen_russia, autogenerated on \n');
    file.write('// ' + moment().utc().add('hours', 4).format('LLL') + " (MSK)\n\n");
    file.write('function FindProxyForURL(url, host) {\n  blockedips = [ ');
    // insert IPs start
    for (var key in ips) {
        file.write('\n    "' + ips[key] + '",');
    }
    file.write('\n');
    // insert IPs end
    file.write('      ];\n\n  if (blockedips.indexOf(dnsResolve(host)) != -1) {\n    return "' + proxy_string + '; DIRECT";\n  }\n\n  return "DIRECT";\n}');
    file.end();

}

function generate_pac() {
    //saving file with rkn dump
    var file = fs.createWriteStream("dump.txt");
    var r = request("https://raw.githubusercontent.com/zapret-info/z-i/master/dump.csv").pipe(file);
    r.on("finish", function () {

        // call IPs parser
        find_IP("dump.txt");
    });
}

generate_pac();
var rule = new schedule.RecurrenceRule();
rule.minute = new schedule.Range(0, 59, 15); // run task every 15 minutes
schedule.scheduleJob(rule, generate_pac);

var server = app.listen(process.env.PORT || 3000, function () { //starting web-server
    console.log('Listening on port %d', server.address().port);
});
